name: Deploy to AWS EC2

on:
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql-test:
        image: mysql:latest
        env:
          MYSQL_ROOT_PASSWORD: root123 # Set the root password
          MYSQL_USER: user123 # Optional: Create a non-root user
          MYSQL_PASSWORD: root123 # Password for the non-root user
          MYSQL_DATABASE: mysqldb
          MYSQL_INIT_COMMAND: "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'root123';"  # Ensure mysql_native_password is used
        ports:
          - "3306:3306"
        options:
          --health-cmd="mysqladmin ping --silent --user=root --password=root123"
          --health-timeout=5s
          --health-retries=10
          --health-start-period=30s

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java & Build Spring Boot App
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Get MySQL container IP address
        run: |
          CONTAINER_ID=$(docker ps -q --filter "ancestor=mysql:latest")
          CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $CONTAINER_ID)
          echo "MySQL container IP is $CONTAINER_IP"
          echo "CONTAINER_IP=$CONTAINER_IP" >> $GITHUB_ENV

      - name: Wait for MySQL to be ready
        run: |
          CONTAINER_ID=$(docker ps -q --filter "ancestor=mysql:latest")
          echo "Waiting for MySQL to be ready..."
          until mysqladmin ping --host=$CONTAINER_IP --port=3306 --user=root --password=root123 --silent; do
            echo "Waiting for MySQL..."
            sleep 5
          done
          echo "MySQL is ready!"
          DB_IP="$CONTAINER_IP:3306"
          echo "DB_IP=$DB_IP" >> $GITHUB_ENV
          echo "MySQL container IP is $DB_IP"

      - name: Build JAR Unit Test
        env:
          DB_IP: ${{ env.DB_IP }}
          DB_DB: mysqldb
          DB_USERNAME: root
          DB_PASSWORD: root123
        run: |
          echo "MySQL container IP is $DB_IP"
          mvn clean verify -Ddb.ip=$DB_IP -Ddb.db=$DB_DB -Ddb.username=$DB_USERNAME -Ddb.password=$DB_PASSWORD

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Push Docker image to ECR
        if: ${{ success() }}
        run: |
          aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 409151997352.dkr.ecr.ap-southeast-1.amazonaws.com

      - name: Build and Tag Docker Image
        if: ${{ success() }}
        run: |
          docker build -t payment_microservice -f Dockerfile.payment .

      - name: Tag Docker image
        if: ${{ success() }}
        run: |
          docker tag payment_microservice:latest 409151997352.dkr.ecr.ap-southeast-1.amazonaws.com/ass-backend:booking_microservice_updated

      - name: Push Docker image to ECR
        if: ${{ success() }}
        run: |
          docker push 409151997352.dkr.ecr.ap-southeast-1.amazonaws.com/ass-backend:booking_microservice_updated

      - name: Trigger ECS service update
        run: |
          # Force ECS to launch new tasks and pull the latest image from ECR
          aws ecs update-service --cluster ass-ecs --service ass-ecs-fargate-v3 --force-new-deployment

      - name: Cleanup
        run: docker logout
